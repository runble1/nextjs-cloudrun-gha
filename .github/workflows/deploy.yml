name: deploy
on:
  push:
    branches:
      - 'main'
    paths:
      - 'nextjs-docker/**'
  pull_request:
    branches:
      - 'main'

env:
  GCP_REGION: ${{ secrets.GCP_REGION_PRD }}
  #IMAGE: asia.gcr.io/${{ secrets.GCP_PROJECT_ID_PRD }}/hello_cloudrun:${{ github.sha }}
  IMAGE: asia-northeast1-docker.pkg.dev/be-nishiyama-wataru/nextjs-docker:${{ github.sha }}
  GOOGLE_IAM_WORKLOAD_IDENTITY_POOL_PROVIDER: ${{ secrets.GOOGLE_IAM_WORKLOAD_IDENTITY_POOL_PROVIDER }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Set branch name
        id: vars
        run: echo ::set-output name=pushed_branch::${GITHUB_REF#refs/*/}

      # nextjs-dockerのみをビルド対象とする
      - name: Git checkout
        run: |
          git clone -b ${{ steps.vars.outputs.pushed_branch }} --filter=blob:none --no-checkout --depth 2 --sparse https://${GITHUB_ACTOR}:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git .
          git sparse-checkout init --cone
          git sparse-checkout add nextjs-docker
          git checkout

      - name: Auth Google Cloud
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: "${{ env.GOOGLE_IAM_WORKLOAD_IDENTITY_POOL_PROVIDER }}"
          service_account: "${{ env.SERVICE_ACCOUNT_EMAIL }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Authorize Docker push
        run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev

      - name: Build a docker image
        run: docker build -t ${{ env.IMAGE }} -f Dockerfile .
        working-directory: ./nextjs-docker

      - name: Push the docker image
        run: docker push ${{ env.IMAGE }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: cloudrun-hello
          image: ${{ env.IMAGE }}
          region: ${{ env.GCP_REGION }}

      - name: Clean up Container images
        run: |
          gcloud container images list-tags "${BASE_IMAGE}" \
            --filter="NOT tags:${GITHUB_SHA}" --format="get(digest)" | \
          while read digest
          do
            gcloud container images delete -q --force-delete-tags "${BASE_IMAGE}@$digest"
          done
        env:
          GITHUB_SHA: ${{ github.sha }}
          BASE_IMAGE: ${{ env.IMAGE }}

